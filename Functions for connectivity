### FUNCTIONS FILE
# This file contain all the functions, which are used in the main files. 
@author: Nikita Otstavnov, 2023
"""

def src_average(folder, spacing, subjects_dir, n_jobs, dist, ico, 
                conductivity, mindist):
    import mne
    import os
    import os.path as op
    import conpy
    os.chdir(folder)
    
    #Average Source Space
    fsaverage = mne.setup_source_space('fsaverage', spacing=spacing,
                                       subjects_dir=subjects_dir,
                                       n_jobs=n_jobs, add_dist=False)
    mne.write_source_spaces('Sub_for_con_Avg-{}-src.fif'.format(spacing), 
                            fsaverage, overwrite = True)
    
    #Average Forward Model
    trans    = op.join(folder, 'Av-trans.fif')
    SDFR     = folder + '/' +'S1_filtered.fif'
    data     = mne.io.read_raw_fif(SDFR, allow_maxshield=False, 
                               preload=False, on_split_missing='raise', 
                               verbose=None)
    info     = data.info
    
    verts    = conpy.select_vertices_in_sensor_range(fsaverage, 
                                                     dist=dist, 
                                                     info=info, 
                                                     trans = trans) 
    
    return fsaverage
  
def new_morphing(spacing, subjects_dir, n_jobs, 
                 folder, subject_name):
    import mne
    import os
    os.chdir(folder)
  
    fsaverage   = mne.read_source_spaces('Sub_for_con_Avg-{}-src.fif'.format(spacing))
 
    subject_src = mne.morph_source_spaces(fsaverage, 
                                          '{}'.format(subject_name), 
                                          subjects_dir  = subjects_dir)                                             
    
    mne.write_source_spaces('{}_for_con-morph-src.fif'.format(subject_name), 
                            subject_src, overwrite = True)
    
    return subject_src


def new_morphed_forward_model(folder, subject_name, file_name, n_jobs,
                              dist, ico, conductivity, subjects_dir, mindist ):
    import os
    import mne
    import os.path as op
    import conpy 
    
    os.chdir(folder)
    file_to_read = os.path.join(folder, file_name) 
    raw_data     = mne.io.read_raw_fif(file_to_read, 
                                       allow_maxshield=False, 
                                       preload=False, 
                                       on_split_missing='raise', 
                                       verbose=None)
    
    info         = raw_data.info
   
    src          = mne.read_source_spaces('{}_for_con-morph-src.fif'.format(subject_name))
   
    trans        = op.join(folder, '{}-trans.fif'.format(subject_name))
    
    verts        = conpy.select_vertices_in_sensor_range(src, 
                                                         dist=dist, 
                                                         info=info, 
                                                         trans = trans) 
    src_sub      = conpy.restrict_src_to_vertices(src, verts)     
    
    bem_model    = mne.make_bem_model('{}'.format(subject_name), ico=ico, subjects_dir=subjects_dir,
                                      conductivity=(0.3,))
    bem          = mne.make_bem_solution(bem_model)
    
    fwd          = mne.make_forward_solution(info, trans=trans, src=src_sub,
                                             bem=bem,
                                             meg=True,
                                             eeg=False,
                                             mindist= mindist,
                                             n_jobs=n_jobs)                                   
    
    mne.write_forward_solution('{}-for_con-morphed-fwd.fif'.format(subject_name), fwd, overwrite=True)

    return fwd


def pairs_identification(folder, spacing, subject_name, num_subject,
                         max_sensor_dist, subjects_dir, min_dist):
    import os
    import mne
    import conpy
    import numpy as np
    
    os.chdir(folder)   
    
    src_surf_fs = mne.read_source_spaces('Sub_for_con_Avg-{}-src.fif'.format(spacing))
    index       = np.linspace(1, num_subject, num_subject, dtype = int)  
    fwd_ind_2   = []
    fwd_ind     = []
    src_surf    = []
    fwd1        = []
    
    i = 1
    for i in index:  
        os.chdir(folder)   
        fwd            = mne.read_forward_solution('S{}-for_con-morphed-fwd.fif'.format(i))  
        fwd_ind.append(conpy.forward_to_tangential(fwd))
     
    fwd_ind_3   = np.array(fwd_ind)
    fwd_ind_4   = [1]   
    fwd_first   = conpy.restrict_forward_to_sensor_range(fwd_ind_3[0], max_sensor_dist)
    fwd_ind_3[0]= fwd_first
    
    vert_inds   = conpy.select_shared_vertices(fwd_ind_3, 
                                               ref_src=src_surf_fs, 
                                               subjects_dir=subjects_dir)
    
    
    for fwd, vert_ind, i in zip(fwd_ind_3, vert_inds, index):
        fwd_r   = conpy.restrict_forward_to_vertices(fwd, vert_ind)
        fwd1.append(fwd_r)
        mne.write_forward_solution('S{}-commonvertices-surf-fwd.fif'.format(i), fwd_r,
                                   overwrite=True)
        if i    == index[0]:
            fwd_first = fwd_r
                           
    print('Computing connectivity pairs for all subjects...')
    pairs       = conpy.all_to_all_connectivity_pairs(fwd_first, 
                                                      min_dist=min_dist)
    
    subj1_to_fsaverage = conpy.utils.get_morph_src_mapping(src_surf_fs,  
                                                           fwd_first['src'], 
                                                           indices=True, 
                                                           subjects_dir=subjects_dir)[1]
    pairs       = [[subj1_to_fsaverage[v] for v in pairs[0]],
                   [subj1_to_fsaverage[v] for v in pairs[1]]]
    np.save('Average-pairs', pairs)    
    
    return pairs


def connectivity_estimation(subject_name, folder, reg, 
                            freq_min, freq_max, subjects_dir,
                            condition_1,condition_2, spacing, num_subject, 
                            n_jobs): 
    import os
    import numpy as np
    import mne
    import conpy
    subject_index      = int(subject_name.replace('S',''))
    
    os.chdir(folder) 
    fsaverage          = mne.read_source_spaces('Sub_for_con_Avg-{}-src.fif'.format(spacing))
    
    connectvity_1      = []
    connectvity_2      = []
    
    reg                = 0.05
    index              = np.linspace(1, num_subject, num_subject, dtype = int)
  
    os.chdir(folder) 
    
    fwd_ind            = mne.read_forward_solution('S{}-commonvertices-surf-fwd.fif'.format(subject_index))
    fwd_tan            = conpy.forward_to_tangential(fwd_ind)
    pairs              = np.load('Average-pairs.npy')
  
    fsaverage_to_subj  = conpy.utils.get_morph_src_mapping(fsaverage, 
                                                           fwd_ind['src'], 
                                                           indices=True, 
                                                           subjects_dir=subjects_dir)[0]
    
  
    ##### !!! IS THIS CODE STRING FOR ONE SUBJ OR FOR EVERYONE? 
    
    pairs              = [[fsaverage_to_subj[v] for v in pairs[0]],                                 #!!!! PROBLEM HERE!!!! 
                          [fsaverage_to_subj[v] for v in pairs[1]]]


    csd_1              = mne.time_frequency.read_csd('{}_{}_csd.h5'.format(subject_name, 
                                                                            condition_1))
    csd_2              = mne.time_frequency.read_csd('{}_{}_csd.h5'.format(subject_name, 
                                                                            condition_2))      
   
    csd_1              = csd_1.mean(fmin=freq_min, fmax=freq_max)    
    csd_2              = csd_2.mean(fmin=freq_min, fmax=freq_max)    
    
    # Compute connectivity for all frequency bands
    con_1              = conpy.dics_connectivity(vertex_pairs=pairs,
                                                 fwd=fwd_tan,
                                                 data_csd=csd_1,
                                                 reg=reg,
                                                 n_jobs=n_jobs)
    con_2              = conpy.dics_connectivity(vertex_pairs=pairs,
                                                 fwd=fwd_tan,
                                                 data_csd=csd_2,
                                                 reg=reg,
                                                 n_jobs=n_jobs)
    
    con_1.save('{}-connectivity for band from {} to {}_{}'.format(subject_name, freq_min, 
                                                                   freq_max, condition_1))
    con_2.save('{}-connectivity for band from {} to {}_{}'.format(subject_name, freq_min, 
                                                                   freq_max, condition_2))
    
    connectvity_1.append(con_1)
    connectvity_2.append(con_2)
    
    return connectvity_1, connectvity_2


def connectivity_vizualization(subject_name, condition_1, condition_2,
                               freq_min, freq_max,
                               hemi, figure, size, borders, atlas,
                               subjects_dir, n_lines, vmin, vmax):
    import os
    import numpy as np
    import mne
    import conpy
    import matplotlib.pyplot as plt
    
    con_1              = conpy.read_connectivity('{}-connectivity for band from {} to {}_{}'.format(subject_name,
                                                                                       freq_min,freq_max, condition_1))
    con_2              = conpy.read_connectivity('{}-connectivity for band from {} to {}_{}'.format(subject_name,
                                                                                       freq_min,freq_max, condition_2))

    adj                = (con_1 - con_2).get_adjacency()
    fig                = plt.figure()
    plt.imshow(adj.toarray(), interpolation='nearest')

    # CIRCLE
    labels             = mne.read_labels_from_annot('{}'.format(subject_name), atlas,
                                                    subjects_dir=subjects_dir)
    del labels [-1]

    p                  = con_1.parcellate(labels, 'degree', weight_by_degree=True)                   

    p.plot(n_lines=n_lines, vmin=vmin, vmax=vmax)
    plt.title('Strongest parcel-to-parcel connection', color='white')
 
    # BRAIN
    con_contrast       = con_1 - con_2
    all_to_all         = con_contrast.make_stc('absmax')                                    #'degree', weight_by_degree=True
    brain              = all_to_all.plot('{}'.format(subject_name), 
                                         subjects_dir=subjects_dir, hemi=hemi,
                                         figure=figure, size=size)
    brain.add_annotation(atlas, borders=borders)

    return p, brain


def connectivity_statistics(folder, num_subject, spacing, atlas,  subjects_dir,
                            freq_min,freq_max, condition_1, condition_2,  hemi,
                            cluster_threshold, n_perm, nj, ms, tl, alpha, seed, 
                            summary, brain_mode, views): 
    import os
    import mne
    import numpy as np
    import conpy
    from h5io import write_hdf5, read_hdf5

   
    con_surf_1         = [] 
    con_surf_2         = [] 
    con_surf_1_av      = []
    con_surf_2_av      = []

    os.chdir(folder)   
    fsaverage          = mne.read_source_spaces('Sub_for_con_Avg-{}-src.fif'.format(spacing))
    index              = np.linspace(1, num_subject, num_subject, dtype = int)

    i = 1
    for i in index:  
        con_1          = conpy.read_connectivity('S{}-connectivity for band from {} to {}_{}'.format(i,freq_min,freq_max, condition_1))
        con_fsaverage_1= con_1.to_original_src(fsaverage, subjects_dir=subjects_dir)
        con_surf_1.append(con_1)
        con_surf_1_av.append(con_fsaverage_1)
        con_2          = conpy.read_connectivity('S{}-connectivity for band from {} to {}_{}'.format(i,freq_min,freq_max, condition_2))
        con_fsaverage_2= con_2.to_original_src(fsaverage, subjects_dir=subjects_dir)
        con_surf_2.append(con_2)
        con_surf_2_av.append(con_fsaverage_2)
 
   
    print('Averaging connectivity objects...') 
    ga_con             = dict()
    
    con                = con_surf_1_av[0].copy() 
    for other_con in con_surf_1_av[1:]:
        con           += other_con
    con               /= len(con_surf_1_av)
    ga_con[1]          = con
    
    con                = con_fsaverage_2[0].copy()
    for other_con in con_surf_2_av[1:]:
        con           += other_con
    con               /= len(con_surf_2_av)
    ga_con[2]          = con
    
    contrast           =  ga_con[1] - ga_con[2]
    
    ### STATISTICS
    cluster_threshold  = cluster_threshold
    n_perm             = n_perm
    nj                 = nj
    ms                 = ms
    tl                 = tl
    
    stats              = conpy.cluster_permutation_test(con_surf_1_av, con_surf_2_av,
                                                        cluster_threshold=cluster_threshold, 
                                                        src=fsaverage, n_permutations=n_perm, 
                                                        verbose=True, alpha=alpha, tail = tl, 
                                                        n_jobs=nj,
                                                        seed=seed, 
                                                        return_details=True, max_spread=ms)
    
    connection_indices, bundles, bundle_ts, bundle_ps, H0 = stats
    
    ##### H5 file creation
    freqs             = 'alpha_{}-TAIL'.format(tl)
    con_clust         = contrast[connection_indices]
    con_clust.save('Con_stat_from_{}_to_{}'.format(freq_min,freq_max))
    
    write_hdf5('Con_statistics-from_{}_to_{}'.format(freq_min,freq_max), dict(
        connection_indices = connection_indices,
        bundles            = bundles,
        bundle_ts          = bundle_ts,
        bundle_ps          = bundle_ps,
        H0                 = H0), overwrite=True)
  
    ##### PARCEL
    os.chdir(folder)   
    labels            = mne.read_labels_from_annot('fsaverage', atlas, hemi, 
                                                   subjects_dir=subjects_dir)
    label_colors      = [label.color for label in labels]
    del labels[-1]  # drop 'unknown-lh' label
    con_parc          = con_clust.parcellate(labels, summary=summary,
                                             weight_by_degree=False)
    con_parc.save('Con_statistics-{}_{}_contr'.format(freq_min,freq_max))
    
    mne.viz.set_3d_options(depth_peeling=False, antialias=False, multi_samples=1)   
                      
    all_to_all        = con_clust.make_stc(brain_mode)                                    #'degree', weight_by_degree=True
    brain             = all_to_all.plot('fsaverage', subjects_dir=subjects_dir, hemi=hemi_stat,
                                        figure=6, size=400, views=views)
    
    brain.add_annotation(atlas, borders=borders)
    
    return connection_indices, bundles, bundle_ts, bundle_ps, H0, contrast


def connectivity_statistics_visualization(folder, con_1, con_2, condition_1, condition_2,
                                          freq_min, freq_max, num_subject,spacing, hemi,
                                          atlas,  subjects_dir, regexp, summary_stat,
                                          weight_by_degree, hemi_stat, views,borders,
                                          n_lines_stat, vmin_stat, vmax_stat, 
                                          fontsize_names, fontsize_colorbar, brain_mode): 
    import os
    import mne
    import numpy as np
    import conpy
    from h5io import write_hdf5, read_hdf5
         
    con_surf_1         = [] 
    con_surf_2         = [] 
    con_surf_1_av      = []
    con_surf_2_av      = []

    os.chdir(folder)   
    fsaverage          = mne.read_source_spaces('Sub_for_con_Avg-{}-src.fif'.format(spacing))
    index              = np.linspace(1, num_subject, num_subject, dtype = int)

    i = 1
    for i in index:  
        con_1          = conpy.read_connectivity('S{}-connectivity for band from {} to {}_{}'.format(i,freq_min,freq_max, condition_1))
        con_fsaverage_1= con_1.to_original_src(fsaverage, subjects_dir=subjects_dir)
        con_surf_1.append(con_1)
        con_surf_1_av.append(con_fsaverage_1)
        con_2          = conpy.read_connectivity('S{}-connectivity for band from {} to {}_{}'.format(i,freq_min,freq_max, condition_2))
        con_fsaverage_2= con_2.to_original_src(fsaverage, subjects_dir=subjects_dir)
        con_surf_2.append(con_2)
        con_surf_2_av.append(con_fsaverage_2)
      
    print('Averaging connectivity objects...') 
    ga_con             = dict()
    
    con                = con_surf_1_av[0].copy() 
    for other_con in con_surf_1_av[1:]:
        con           += other_con
    con               /= len(con_surf_1_av)
    ga_con[1]          = con
    
    con                = con_fsaverage_2[0].copy()
    for other_con in con_surf_2_av[1:]:
        con           += other_con
    con               /= len(con_surf_2_av)
    ga_con[2]          = con
       
    contrast           =  ga_con[2] - ga_con[1]
    
    os.chdir(folder)
    
    file               = read_hdf5('Con_statistics-from_{}_to_{}'.format(freq_min,freq_max))
    
    connection_indices = file.get('connection_indices')
    con_clust          = contrast[connection_indices]
    
    
    ##### UNILATERALITY
    labels             = mne.read_labels_from_annot('fsaverage', atlas,  subjects_dir=subjects_dir)
    
    selected_label     = mne.read_labels_from_annot('fsaverage',  hemi = hemi,
                                                    regexp=regexp, 
                                                    subjects_dir=subjects_dir)
    
    label_colors       = [label.color for label in selected_label]
    
    del labels[-1]  # drop 'unknown-lh' label
    con_parc           = con_clust.parcellate(selected_label, summary=summary_stat,
                                              weight_by_degree=weight_by_degree)
   
    con_parc.plot(n_lines=n_lines_stat, vmin=vmin_stat, vmax=vmax_stat, 
                  node_colors=label_colors, fontsize_names=fontsize_names, 
                  fontsize_colorbar = fontsize_colorbar)
    
    mne.viz.set_3d_options(depth_peeling=False, antialias=False, multi_samples=1)   
                      
    all_to_all         = con_clust.make_stc(brain_mode)                                    #'degree', weight_by_degree=True
    brain              = all_to_all.plot('fsaverage', subjects_dir=subjects_dir, hemi=hemi_stat,
                                         figure=6, size=400, views=views)
    
    brain.add_annotation(atlas, borders=borders)
    
    return brain, con_parc
    
